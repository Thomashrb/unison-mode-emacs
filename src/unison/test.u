-- Signatures foo : Nat
foo = 3

bar = 2

structural ability Stream e where
  emit : e -> ()

function1' : Nat -> Nat
function1' x = x

Foo.function1 : Nat -> Nat -> Nat
Foo.function1 x x = x

Bar.Foo.function1 : a -> a
Bar.Foo.function1 x = x

function2 : 'Nat
function2 _ = 3

function3 : '{IO, Stream e, g} ()
function3 _ = !(_ -> ())

function4 : () -> ()
function4 _ = ()

structural type Hello a = Hello a
unique type Hallo a = Hallo a

structural ability Foo.Bar.Stream e where
  emit : e -> ()

Foo.Bar.function2 : Nat  -> Nat
Foo.Bar.function2 x = x

Foo.Bar.function3 : a -> a
Foo.Bar.function3 x = x

Foo.Bar.function4 : 'a -> Nat
Foo.Bar.function4 _ = 3

structural type Optional a = None | Some a

use base

use Bar

Stream.sum : '{Stream Nat} () -> Nat
Stream.sum ns =
  h : Nat -> Request {Stream Nat} () -> Nat
  h acc = cases
    {_} -> acc
    {Stream.emit n -> resume} ->
      handle resume () with h (acc + n)
  handle !ns with h 0

Stream.foldLeft : (b -> a -> b) -> b -> '{Stream a} () -> b
Stream.foldLeft f b s =
  h acc = cases
    {_} -> acc
    {Stream.emit a -> resume} ->
      handle resume () with h (f acc a)
  handle !s with h b

Stream.terminated : '{Stream a} () -> '{Stream (Optional a)} ()
Stream.terminated s _ =
  h : Request {Stream a} () ->{Stream (Optional a)} ()
  h = cases
    {_} -> emit None
    {Stream.emit a -> resume} ->
      emit (Some a)
      handle resume () with h
  handle !s with h

Stream.sum' = Stream.foldLeft (Nat.+) 0

{{
  some documentation about ``Stream.pipe``
  documentation can be given here directly instead of using x.doc
}}
Stream.pipe : '{Stream a} () -> '{Ask a, Stream b} r -> '{Stream b} ()
Stream.pipe s f _ =
  h s = cases
    {_} -> ()
    {Ask.ask -> resumeF} ->
      handle !s with cases
        {_} -> ()
        {Stream.emit a -> resumeS} ->
          handle resumeF a with h resumeS
    {Stream.emit b -> resumeF} ->
      emit b
      handle resumeF () with h s
  handle !f with h s

Stream.filter f s =
  go _ =
    a = ask
    if f a then emit a
    else !go
  Stream.pipe s go

Stream.filter.doc : Doc
Stream.filter.doc = {{
Multiline

documentation litteral
}}

Stream.filter.docDeprecated : Doc.Deprecated
Stream.filter.docDeprecated =
  [: Some text in deprecated doc syntax :]

---

Stream.pipe : '{Stream a} () -> '{Ask a, Stream b} r -> '{Stream b} ()
Stream.pipe s f _ =
  h s = cases
    {_} -> ()
    {Ask.ask -> resumeF} ->
      handle !s with cases
        {_} -> ()
        {Stream.emit a -> resumeS} ->
          handle resumeF a with h resumeS
    {Stream.emit b -> resumeF} ->
      emit b
      handle resumeF () with h s
  handle !f with h s

Stream.filter f s =
  go _ =
    a = ask
    if f a then emit a
    else !go
  Stream.pipe s go

Stream.filter.doc = [:
Multiline

documentation
:]
